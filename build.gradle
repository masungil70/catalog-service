plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.kosa.catalogservice'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
	set('testcontainersVersion', "1.19.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//유효성 검증을 위한 라이브러리 
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//테스트 루틴을 처리하기 위한 라이브러리
	testImplementation 'org.assertj:assertj-core'

	//스프링 리엑트브 웹을 위한 테스트 의존성 라이브러리 추가 (WebTestClient 클래스 사용)
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

	//설정 (config) 관련 의존성  라이브러리 추가 
	implementation "org.springframework.boot:spring-boot-configuration-processor"

	//스프링 클라우드 config 클라이언트에 대한 라이브러리 설정
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	
	//스프링 클라우드 config 서버에 대한 재시도 의존성 라이브러리 설정
	implementation 'org.springframework.retry:spring-retry'

	// 카탈로그 서비스에서 스프링 부트 액추에이터 의존성 라이브러리 설정
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//스프링 부트 JDBC 의존성 설정
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	//마리아 DB  의존성 설정
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//Testcontainers의 JUnit 5 기반 테스트를 기본으로 지원하기 때문에 필요한 의존성 라이브러리 설정
	testImplementation 'org.testcontainers:junit-jupiter:1.19.1' // Testcontainers JUnit 통합

	//플라이웨이 의존성 라이브러리 설정
	implementation 'org.flywaydb:flyway-mysql'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

//spring.profiles.active 속성을 설정 하는 방법으로 ./gradlew bootRun 명령어 실행시 속성 변수 추가하여 실행됨 
bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]
}
/*
위 구문 추가후 빌드 하고 실행 방법 
1. 빌드 이미지 생성 명령 
./gradlew bootBuildImage 

2. docker 이미지로 실행하는 방법 (환설 설정 정보를 얻는 서버의 실제 주소를 스프링 환경설정 변수를 사용하여 전달)
docker run -d \
--name catalog-service \
-p 9091:9091 \
-e SPRING_PROFILES_ACTIVE=testdata \
catalog-service \
--spring.cloud.config.uri=http://172.27.99.163:8888


*/